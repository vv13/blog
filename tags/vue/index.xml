<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 🤪</title>
    <link>http://vv13.cn/tags/vue/</link>
    <description>Recent content in Vue on 🤪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://vv13.cn/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vue中如何自定义v-model</title>
      <link>http://vv13.cn/posts/vue%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89v-model/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vv13.cn/posts/vue%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89v-model/</guid>
      <description> 简介 在vue的表单中，大家都享受着v-model带来的便利性，有时候也会遇到自定义v-model的场景，其实它是一颗语法糖而已，那我们接下来就来吃糖吧。
基本的v-model用法为：
&amp;lt;input v-model=&amp;#34;something&amp;#34;&amp;gt; 其实它是以下用法的简写：
&amp;lt;input :value=&amp;#34;something&amp;#34; @input=&amp;#34;something = $event.target.value&amp;#34; /&amp;gt; 因此，自己封装组件的话，可以这样来定义：
// demo.vue &amp;lt;template lang=&amp;#34;html&amp;#34;&amp;gt; &amp;lt;input :value=&amp;#34;value&amp;#34; @input=&amp;#34;valueChange&amp;#34;&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { props: [&amp;#39;value&amp;#39;], methods: { valueChange (v) { this.$emit(&amp;#39;input&amp;#39;, v.target.value) } } } &amp;lt;/script&amp;gt; // 引用 &amp;lt;demo v-model=&amp;#34;something&amp;#34;&amp;gt;&amp;lt;/demo&amp;gt; 用法示例 在使用element组件库中，有些组件需要借助拆分v-model自定义命令才能实现需要的功能，如下:
我们想要展示的数据格式为：
仔细查阅接口文档，并没有我们需要的格式化数据方法，只有一个format =&amp;gt; YYMMDD的类似方法，但是看示例代码它实现了v-model的双向绑定：
&amp;lt;el-time-select v-model=&amp;#34;value1&amp;#34; &amp;lt;/el-time-select&amp;gt; 因此，我们可以通过@input事件获取到它的改变值，然后再通过:value展示时添加一个过滤器，将字符串转换以下即可：
&amp;lt;el-time-select :value=&amp;#34;time | convertToRangeTime&amp;#34; @input=&amp;#34;e =&amp;gt; time = e&amp;#34; &amp;lt;/el-time-select&amp;gt;</description>
    </item>
    
  </channel>
</rss>